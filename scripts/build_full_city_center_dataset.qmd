---
title: "build_full_city_center_dataset"
format: html
editor: visual
---

```{r}

library(dplyr)
library(tidyr)
library(here)
library(sf)
library(readr)
library(ggplot2)
library(ggspatial)
library(leaflet)
library(centr)

i_am("scripts/build_full_city_center_dataset.qmd")

```

```{r}

dta_raw <- readxl::read_excel(
  here("data/geocode_comparison_v5.xlsx"),
  sheet = "copy_of_merged_data2"
)

```

```{r}

dta_clean <- dta_raw %>%
  rename(arcgis_lon = arcgis_long) %>%
  pivot_longer(
    cols = ends_with("lat"),
    names_to = "definition_lat",
    values_to = "lat"
  ) %>%
  pivot_longer(
    cols = ends_with("lon"),
    names_to = "definition_lon",
    values_to = "lon"
  ) %>%
  mutate(
    # Lon cleaning
    definition_lon = stringr::str_replace_all(definition_lon, "Lon", ""),
    definition_lon = stringr::str_replace_all(definition_lon, "lon", ""),
    # Lat cleaning
    definition_lat = stringr::str_replace_all(definition_lat, "Lat", ""),
    definition_lat = stringr::str_replace_all(definition_lat, "lat", "")
  ) %>%
  # The second pivot longer makes excess rows, remove them
  # by filtering to only matching definitions
  filter(definition_lon == definition_lat) %>%
  mutate(
    definition = case_when(
      definition_lon == "GoogleEarth" ~ "Google Earth",
      definition_lon == "CityHall" ~ "City Hall",
      definition_lon == "Gaz" ~ "Gazetteer",
      definition_lon == "Cen82" ~ "Central Business District",
      definition_lon == "arcgis_" ~ "ArcGIS",
      TRUE ~ definition_lon
    ),
    # Clean up place geoid
    geoid_pl = stringr::str_pad(`unique place code`, 7, side = "left", pad = "0")
  )

```

## Calculate population and "job" centers for the top 100 MSAs

```{r}

top_us_cities_simple <- dta_clean %>%
  select(CBSA_name, CBSA_code, PrincipleCity, PrincipleCityStateFIPS, geoid_pl, Pop10) %>%
  distinct() %>%
  slice_max(order_by = Pop10, n = 30)

top_us_cities_cbsa_codes <- top_us_cities_simple %>%
  pull(CBSA_code)

top_us_cities <- dta_clean %>%
  filter(CBSA_code %in% top_us_cities_cbsa_codes)

```

```{r}

source(here("scripts/utils.R"))

dta_complete <- dta_clean %>%
  slice_max(order_by = Pop10, n = 30)

for (i in 1:nrow(top_us_cities_simple)) {
  
  if (i > 10) {
    break
  }
  
  pop_weighted_center <- get_densest_tract(
    top_us_cities_simple$PrincipleCityStateFIPS[i],
    top_us_cities_simple$geoid_pl[i]
  )
  
  print(glimpse(pop_weighted_center))
  
  pop_center_row <- dta_clean %>%
    filter(CBSA_code == top_us_cities_simple$CBSA_code[i]) %>%
    filter(definition == "Google Earth") %>%
    mutate(
      # Update definition name
      definition_lat = "Population center",
      definition_lon = "Population center",
      definition = "Population center",
      # Update lat and lon values
      lat = pop_weighted_center %>% pull(lat) %>% nth(1),
      lon = pop_weighted_center %>% pull(lon) %>% nth(1)
    )
  
  dta_complete <- bind_rows(dta_complete, pop_center_row)
  
}

# readr::write_csv(dta_complete, here("data/city_centers_tidy.csv"))

```



```{r}

dta_complete %>%
  filter(PrincipleCity == "Dallas city") %>%
  filter(definition == "Population center") %>%
  leaflet() %>%
  addProviderTiles(providers$OpenStreetMap) %>%  # Similar to cartolight
  addCircleMarkers(
    lng = ~lon,
    lat = ~lat,
    radius = 6,
    color = "red",
    stroke = FALSE,
    fillOpacity = 0.8
  ) %>%
  addScaleBar(position = "bottomleft") %>%
  addLegend("bottomright", colors = "red", labels = "City Center") %>%
  addControl("<strong>City Centers</strong>", position = "topright")

```
